// Package http_v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package http_v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CreateUserReq defines model for CreateUserReq.
type CreateUserReq struct {
	Email *string `json:"email,omitempty" validate:"email"`

	// FirstName The user's first name
	FirstName string `json:"firstName" validate:"required"`

	// Id The user's unique identifier in UUID format
	Id string `json:"id" validate:"required,uuid_rfc4122"`

	// LastName The user's last names
	LastName string `json:"lastName" validate:"required"`
}

// PostUsersCreateJSONRequestBody defines body for PostUsersCreate for application/json ContentType.
type PostUsersCreateJSONRequestBody CreateUserReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostUsersCreateWithBody request with any body
	PostUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersCreate(ctx context.Context, body PostUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostUsersCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersCreate(ctx context.Context, body PostUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostUsersCreateRequest calls the generic PostUsersCreate builder with application/json body
func NewPostUsersCreateRequest(server string, body PostUsersCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersCreateRequestWithBody generates requests for PostUsersCreate with any type of body
func NewPostUsersCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostUsersCreateWithBodyWithResponse request with any body
	PostUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersCreateResponse, error)

	PostUsersCreateWithResponse(ctx context.Context, body PostUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersCreateResponse, error)
}

type PostUsersCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUsersCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostUsersCreateWithBodyWithResponse request with arbitrary body returning *PostUsersCreateResponse
func (c *ClientWithResponses) PostUsersCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersCreateResponse, error) {
	rsp, err := c.PostUsersCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersCreateResponse(rsp)
}

func (c *ClientWithResponses) PostUsersCreateWithResponse(ctx context.Context, body PostUsersCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersCreateResponse, error) {
	rsp, err := c.PostUsersCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersCreateResponse(rsp)
}

// ParsePostUsersCreateResponse parses an HTTP response from a PostUsersCreateWithResponse call
func ParsePostUsersCreateResponse(rsp *http.Response) (*PostUsersCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTU/ENhD9K9a0UkHK1y4IQU4t9NCVCkUtqAeEqll7kjUktrEndFco/72ys5RdUFGr",
	"cps4z543b2beC0jbO2vIcID6BYJcUY8pvPCETLeB/K/0FA+ct448a0q/qUfdpWCNvesIalgi92i+by2v",
	"sC+k7SED3rj4K7DXpoUM1rlFp3NpFbVkclqzx5yxTW8+Y6cVcrwwPT+OGTTaB77CniJCUZBeO9bWQA03",
	"KxJDIP9dEAklTIRlO5TO/SDpf9Dw9DRoTyox0epTCoPRTwMJrciwbjR5oY24vV38KBrre+Q9YkdzdUSn",
	"zSyfN6ez/PhMVjnK5Ul+oqRUp8fNkcLlF/DOhkGrP3wjj2fzeSqiw3+hZgQlMcMe6d9xY75IzTF7+6rv",
	"orS7nd6hef93Ort8IMnTXW0a+7GCX1KAneiHjnWnDQnrRdCm7ShPnzv42J27C9v31lyif7w/WDG7uixl",
	"OurRPxbWt+WKOlcexnd+urn8uYjVa05q/JZkET9cLyCDZ/JhIlEVs+IMxgysI4NOQw3zoioqyMAhr5Im",
	"ZdQ5lDKtWNotG/iTemjNZBSp9/zf6O8SjGuKEbJQUMO1DRy3OEwLDZPwFPjcqk3MKa1hMik9Otdpme6W",
	"DyFyeLWEGH3rqYEavinfPKPcGka57xbjtsHBWRMmv5hX1ccCr6x4BQkdhCGKRT4MgQWvSMyrSgRGHoKI",
	"s5XmNwx9j34D9daggkBh6M80ucU0HIF8bAfUd/8o6ATZlTMTVLSFuERtxIHzVg0yHh9uoZDB4DuoYTsl",
	"6HSxXYzodOXzDMbsv6dbGCafEIytNu0rsrFeMAWe9msv8xaZv2MA4/34VwAAAP//p/u0J84FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
